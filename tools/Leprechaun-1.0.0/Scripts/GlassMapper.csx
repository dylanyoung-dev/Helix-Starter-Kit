// Generates Synthesis models

Log.Debug($"Emitting GlassMapper templates for {ConfigurationName}...");

public string RenderTemplates()
{
    var localCode = new System.Text.StringBuilder();

    foreach (var template in Templates)
    {
        localCode.AppendLine($@"
namespace {template.Namespace}.Models
{{
    using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
    using Helix.Foundation.ORM.Models;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;

	/// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
	///[RepresentsSitecoreTemplateAttribute(""{{{template.Id}}}"", """", ""{ConfigurationName}"")]
    [SitecoreType(TemplateId = {template.Namespace}.Templates.{template.CodeName}.TemplateIdString)]
	public partial interface I{template.CodeName} : {GetBaseInterfaces(template)}
	{{
		{RenderInterfaceFields(template)}
	}}

}}"
        );
    }

    return localCode.ToString();
}

Code.AppendLine($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

{RenderTemplates()}
");

public string GetBaseInterfaces(TemplateCodeGenerationMetadata template)
{
    var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

    foreach (var baseTemplate in template.BaseTemplates)
    {
        bases.Add($"{baseTemplate.Namespace}.I{baseTemplate.CodeName}");
    }

    if (bases.Count == 0)
    {
        // IStandardTemplateItem only needed when no other bases exist otherwise irrelevant by transitive inheritance
        bases.Add("IGlassBase");
    }

    return string.Join(", ", bases);
}

public string RenderInterfaceFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
		/// <summary>{field.HelpText}</summary>
        [SitecoreField(FieldName = {template.Namespace}.Templates.{template.CodeName}.Fields.{field.CodeName}_FieldName)]
		{GetFieldType(field)} {field.CodeName} {{ get; }}");
    }

    return localCode.ToString();
}

public string GetFieldType(TemplateFieldCodeGenerationMetadata field)
{
    switch (field.Type.ToLower())
    {
        case "tristate":
            return "TriState";
        case "checkbox":
            return "bool";

        case "date":
        case "datetime":
            return "DateTime";

        case "number":
            return "float";

        case "integer":
            return "int";

        case "treelist":
        case "treelistex":
        case "treelist descriptive":
        case "checklist":
        case "multilist":
            return "IEnumerable<Guid>";

        case "grouped droplink":
        case "droplink":
        case "lookup":
        case "droptree":
        case "reference":
        case "tree":
            return "Guid";

        case "file":
            return "File";

        case "image":
            return "Image";

        case "rich text":
        case "html":
            return "string";

        case "general link":
            return "Link";

        case "single-line text":
        case "multi-line text":
        case "frame":
        case "text":
        case "memo":
        case "droplist":
        case "grouped droplist":
        case "valuelookup":
            return "string";
        default:
            return "string";
    }
}